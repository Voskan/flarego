name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  go:
    name: Go Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run Go tests with coverage
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
        env:
          CGO_ENABLED: 0

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: coverage.out

  web:
    name: Web UI Lint, Typecheck & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      # - name: Lint
      #   run: npm run lint

      - name: Typecheck
        run: npx tsc --noEmit

      - name: Build
        run: npm run build

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [go, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build gateway image
        run: docker build -f build/Dockerfile.gateway -t flarego/gateway:ci .

      - name: Build agent image
        run: docker build -f build/Dockerfile.agent -t flarego/agent:ci .

  integration:
    name: Integration Tests (docker-compose)
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build images for compose
        run: |
          docker build -f build/Dockerfile.gateway -t flarego/gateway:ci .
          docker build -f build/Dockerfile.agent -t flarego/agent:ci .

      - name: Start stack
        run: |
          docker compose -f deployments/docker-compose.yaml up -d
          sleep 20

      - name: Smoke test gateway
        run: curl -f http://localhost:8080/metrics

      - name: Smoke test demo app
        run: curl -f http://localhost:8081/health

      - name: Stop stack
        if: always()
        run: docker compose -f deployments/docker-compose.yaml down
