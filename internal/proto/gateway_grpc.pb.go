// internal/proto/gateway.proto
// This schema defines the gRPC contract between the in‑process FlareGo agent
// and the central gateway.  The protocol is intentionally minimal in v0.1:
// agents stream raw flame‑graph JSON frames; the gateway may respond with an
// optional acknowledgement or future control messages.  Keeping the payload as
// opaque bytes avoids frequent schema churn on the hot path.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gateway.proto

package agentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_Stream_FullMethodName = "/agentpb.GatewayService/Stream"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GatewayService is implemented by the gateway; agents establish a
// bidirectional stream so the server can send control messages in future (e.g.
// sampling‑rate adjustments).  For v0.1 the server replies with an Empty upon
// stream closure.
type GatewayServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FlamegraphChunk, emptypb.Empty], error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FlamegraphChunk, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[0], GatewayService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FlamegraphChunk, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayService_StreamClient = grpc.ClientStreamingClient[FlamegraphChunk, emptypb.Empty]

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
//
// GatewayService is implemented by the gateway; agents establish a
// bidirectional stream so the server can send control messages in future (e.g.
// sampling‑rate adjustments).  For v0.1 the server replies with an Empty upon
// stream closure.
type GatewayServiceServer interface {
	Stream(grpc.ClientStreamingServer[FlamegraphChunk, emptypb.Empty]) error
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) Stream(grpc.ClientStreamingServer[FlamegraphChunk, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServiceServer).Stream(&grpc.GenericServerStream[FlamegraphChunk, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GatewayService_StreamServer = grpc.ClientStreamingServer[FlamegraphChunk, emptypb.Empty]

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentpb.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GatewayService_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gateway.proto",
}
