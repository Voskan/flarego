// internal/proto/trace.proto
// Canonical schema describing low‑level runtime events exchanged between
// FlareGo components (future versions may stream this in addition to aggregated
// flamegraph chunks).  The message structure mirrors pkg/trace.Event so that
// zero‑copy mapping is straightforward.
//
// Notes for maintainers:
//   • Field numbers are frozen – never reuse.
//   • All numeric types use fixed‑width unsigned/signed integers to minimise
//     ambiguity across languages.
//   • No package‑level options besides go_package to keep imports clean.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: trace.proto

package agentpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventType matches constants in pkg/trace.EventType.
type EventType int32

const (
	// Unknown / reserved
	EventType_ET_UNSPECIFIED EventType = 0
	// 1–999 are kept in sync with Go runtime/trace; subset we care about.
	EventType_ET_GO_CREATE  EventType = 1 // goroutine creation
	EventType_ET_GO_END     EventType = 2 // goroutine finished
	EventType_ET_GO_SCHED   EventType = 3 // goroutine scheduled
	EventType_ET_GO_BLOCKED EventType = 4 // goroutine blocked
	EventType_ET_GC_START   EventType = 5 // GC cycle start
	EventType_ET_GC_END     EventType = 6 // GC end
	// FlareGo synthetic events (1000+)
	EventType_ET_HEAP_SAMPLE EventType = 1000
	EventType_ET_BLOCKED_CNT EventType = 1001
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:    "ET_UNSPECIFIED",
		1:    "ET_GO_CREATE",
		2:    "ET_GO_END",
		3:    "ET_GO_SCHED",
		4:    "ET_GO_BLOCKED",
		5:    "ET_GC_START",
		6:    "ET_GC_END",
		1000: "ET_HEAP_SAMPLE",
		1001: "ET_BLOCKED_CNT",
	}
	EventType_value = map[string]int32{
		"ET_UNSPECIFIED": 0,
		"ET_GO_CREATE":   1,
		"ET_GO_END":      2,
		"ET_GO_SCHED":    3,
		"ET_GO_BLOCKED":  4,
		"ET_GC_START":    5,
		"ET_GC_END":      6,
		"ET_HEAP_SAMPLE": 1000,
		"ET_BLOCKED_CNT": 1001,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{0}
}

// Event is a single runtime record.
type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ts            uint64                 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"` // monotonic ns since process start
	G             uint64                 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`   // goroutine id (0 if N/A)
	P             int32                  `protobuf:"varint,3,opt,name=p,proto3" json:"p,omitempty"`   // processor id (-1 if unknown)
	Type          EventType              `protobuf:"varint,4,opt,name=type,proto3,enum=agentpb.EventType" json:"type,omitempty"`
	Value         int64                  `protobuf:"zigzag64,5,opt,name=value,proto3" json:"value,omitempty"`      // payload (bytes, ns, count) depending on type
	Stack         []uint64               `protobuf:"varint,6,rep,packed,name=stack,proto3" json:"stack,omitempty"` // PCs root→leaf (may be empty)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_trace_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Event) GetG() uint64 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Event) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *Event) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_ET_UNSPECIFIED
}

func (x *Event) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Event) GetStack() []uint64 {
	if x != nil {
		return x.Stack
	}
	return nil
}

// TraceBatch bundles events for efficient transport.
type TraceBatch struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Events []*Event               `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// wall_time is optional absolute timestamp (RFC3339) of first event, useful
	// for correlation across hosts.  Empty string implies sender’s clock.
	WallTime      string `protobuf:"bytes,2,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceBatch) Reset() {
	*x = TraceBatch{}
	mi := &file_trace_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceBatch) ProtoMessage() {}

func (x *TraceBatch) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceBatch.ProtoReflect.Descriptor instead.
func (*TraceBatch) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{1}
}

func (x *TraceBatch) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TraceBatch) GetWallTime() string {
	if x != nil {
		return x.WallTime
	}
	return ""
}

var File_trace_proto protoreflect.FileDescriptor

const file_trace_proto_rawDesc = "" +
	"\n" +
	"\vtrace.proto\x12\aagentpb\"\x87\x01\n" +
	"\x05Event\x12\x0e\n" +
	"\x02ts\x18\x01 \x01(\x04R\x02ts\x12\f\n" +
	"\x01g\x18\x02 \x01(\x04R\x01g\x12\f\n" +
	"\x01p\x18\x03 \x01(\x05R\x01p\x12&\n" +
	"\x04type\x18\x04 \x01(\x0e2\x12.agentpb.EventTypeR\x04type\x12\x14\n" +
	"\x05value\x18\x05 \x01(\x12R\x05value\x12\x14\n" +
	"\x05stack\x18\x06 \x03(\x04R\x05stack\"Q\n" +
	"\n" +
	"TraceBatch\x12&\n" +
	"\x06events\x18\x01 \x03(\v2\x0e.agentpb.EventR\x06events\x12\x1b\n" +
	"\twall_time\x18\x02 \x01(\tR\bwallTime*\xae\x01\n" +
	"\tEventType\x12\x12\n" +
	"\x0eET_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fET_GO_CREATE\x10\x01\x12\r\n" +
	"\tET_GO_END\x10\x02\x12\x0f\n" +
	"\vET_GO_SCHED\x10\x03\x12\x11\n" +
	"\rET_GO_BLOCKED\x10\x04\x12\x0f\n" +
	"\vET_GC_START\x10\x05\x12\r\n" +
	"\tET_GC_END\x10\x06\x12\x13\n" +
	"\x0eET_HEAP_SAMPLE\x10\xe8\a\x12\x13\n" +
	"\x0eET_BLOCKED_CNT\x10\xe9\aB2Z0github.com/Voskan/flarego/internal/proto;agentpbb\x06proto3"

var (
	file_trace_proto_rawDescOnce sync.Once
	file_trace_proto_rawDescData []byte
)

func file_trace_proto_rawDescGZIP() []byte {
	file_trace_proto_rawDescOnce.Do(func() {
		file_trace_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trace_proto_rawDesc), len(file_trace_proto_rawDesc)))
	})
	return file_trace_proto_rawDescData
}

var file_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_trace_proto_goTypes = []any{
	(EventType)(0),     // 0: agentpb.EventType
	(*Event)(nil),      // 1: agentpb.Event
	(*TraceBatch)(nil), // 2: agentpb.TraceBatch
}
var file_trace_proto_depIdxs = []int32{
	0, // 0: agentpb.Event.type:type_name -> agentpb.EventType
	1, // 1: agentpb.TraceBatch.events:type_name -> agentpb.Event
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_trace_proto_init() }
func file_trace_proto_init() {
	if File_trace_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trace_proto_rawDesc), len(file_trace_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trace_proto_goTypes,
		DependencyIndexes: file_trace_proto_depIdxs,
		EnumInfos:         file_trace_proto_enumTypes,
		MessageInfos:      file_trace_proto_msgTypes,
	}.Build()
	File_trace_proto = out.File
	file_trace_proto_goTypes = nil
	file_trace_proto_depIdxs = nil
}
