// internal/proto/agent.proto
// RPC contract for control‐plane communication *from* the gateway *to* agents.
// In FlareGo v0.1 agents are largely autonomous (they push flamegraphs and do
// not await commands), but exposing this service early allows future features
// such as remote sampler tuning, version upgrade orchestration and health
// checks without breaking backward compatibility.
//
// Design principles:
//   • Keep messages minimal – only what is required for handshake and basic
//     ping/pong.  Fine‑grained control commands can be added with new RPCs or
//     oneof fields in ControlRequest.
//   • Streaming is unidirectional gateway→agent so that the gateway can push
//     config changes instantly while the agent needs only to ACK.
//   • Field numbers are frozen once released.  Reserve ranges for internal
//     use (100‑199) and experimental (200‑299).

// @generated by protoc-gen-connect-es v0.13.0 with parameter "import_extension=ts"
// @generated from file agent.proto (package agentpb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AgentEnvelope, ControlRequest } from "./agent_pbts";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * AgentService is implemented by *agents*; gateway acts as the client.
 *
 * @generated from service agentpb.AgentService
 */
export declare const AgentService: {
  readonly typeName: "agentpb.AgentService",
  readonly methods: {
    /**
     * Handshake opens a bidirectional stream: first message **from** agent must
     * be AgentInfo; afterwards gateway can push ControlRequest, agent responds
     * with ControlResponse.  Agent may also periodically send Heartbeat.
     *
     * @generated from rpc agentpb.AgentService.Handshake
     */
    readonly handshake: {
      readonly name: "Handshake",
      readonly I: typeof AgentEnvelope,
      readonly O: typeof ControlRequest,
      readonly kind: MethodKind.BiDiStreaming,
    },
  }
};

