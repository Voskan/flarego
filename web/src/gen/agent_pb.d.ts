// internal/proto/agent.proto
// RPC contract for control‐plane communication *from* the gateway *to* agents.
// In FlareGo v0.1 agents are largely autonomous (they push flamegraphs and do
// not await commands), but exposing this service early allows future features
// such as remote sampler tuning, version upgrade orchestration and health
// checks without breaking backward compatibility.
//
// Design principles:
//   • Keep messages minimal – only what is required for handshake and basic
//     ping/pong.  Fine‑grained control commands can be added with new RPCs or
//     oneof fields in ControlRequest.
//   • Streaming is unidirectional gateway→agent so that the gateway can push
//     config changes instantly while the agent needs only to ACK.
//   • Field numbers are frozen once released.  Reserve ranges for internal
//     use (100‑199) and experimental (200‑299).

// @generated by protoc-gen-es v1.10.1 with parameter "import_extension=ts"
// @generated from file agent.proto (package agentpb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Empty, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AgentInfo is sent by the agent once on connection so the gateway can label
 * metrics and UI panels.
 *
 * @generated from message agentpb.AgentInfo
 */
export declare class AgentInfo extends Message<AgentInfo> {
  /**
   * ULID string, unique per process start
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string hostname = 2;
   */
  hostname: string;

  /**
   * @generated from field: uint32 pid = 3;
   */
  pid: number;

  /**
   * FlareGo agent version string
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * arbitrary key=value labels
   *
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  constructor(data?: PartialMessage<AgentInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.AgentInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentInfo;

  static equals(a: AgentInfo | PlainMessage<AgentInfo> | undefined, b: AgentInfo | PlainMessage<AgentInfo> | undefined): boolean;
}

/**
 * Heartbeat keeps connection alive; payload is optional runtime stats to help
 * ops dashboards without scraping Prom.
 *
 * @generated from message agentpb.Heartbeat
 */
export declare class Heartbeat extends Message<Heartbeat> {
  /**
   * sender wall clock for latency calc
   *
   * @generated from field: uint64 ts_unix_ms = 1;
   */
  tsUnixMs: bigint;

  /**
   * runtime.NumGoroutine()
   *
   * @generated from field: uint32 goroutines = 2;
   */
  goroutines: number;

  /**
   * runtime.MemStats.Alloc
   *
   * @generated from field: uint64 heap_bytes = 3;
   */
  heapBytes: bigint;

  constructor(data?: PartialMessage<Heartbeat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.Heartbeat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Heartbeat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Heartbeat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Heartbeat;

  static equals(a: Heartbeat | PlainMessage<Heartbeat> | undefined, b: Heartbeat | PlainMessage<Heartbeat> | undefined): boolean;
}

/**
 * ControlRequest allows the gateway to instruct agent to change behaviour.
 *
 * @generated from message agentpb.ControlRequest
 */
export declare class ControlRequest extends Message<ControlRequest> {
  /**
   * @generated from oneof agentpb.ControlRequest.cmd
   */
  cmd: {
    /**
     * @generated from field: agentpb.AdjustSamplingRate adjust_sampling = 1;
     */
    value: AdjustSamplingRate;
    case: "adjustSampling";
  } | {
    /**
     * @generated from field: agentpb.RequestSnapshot request_snapshot = 2;
     */
    value: RequestSnapshot;
    case: "requestSnapshot";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ControlRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.ControlRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlRequest;

  static equals(a: ControlRequest | PlainMessage<ControlRequest> | undefined, b: ControlRequest | PlainMessage<ControlRequest> | undefined): boolean;
}

/**
 * @generated from message agentpb.AdjustSamplingRate
 */
export declare class AdjustSamplingRate extends Message<AdjustSamplingRate> {
  /**
   * @generated from field: uint32 hz = 1;
   */
  hz: number;

  constructor(data?: PartialMessage<AdjustSamplingRate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.AdjustSamplingRate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdjustSamplingRate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdjustSamplingRate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdjustSamplingRate;

  static equals(a: AdjustSamplingRate | PlainMessage<AdjustSamplingRate> | undefined, b: AdjustSamplingRate | PlainMessage<AdjustSamplingRate> | undefined): boolean;
}

/**
 * RequestSnapshot asks the agent to immediately send a flamegraph chunk (e.g.,
 * for UI “Refresh now” button).
 *
 * @generated from message agentpb.RequestSnapshot
 */
export declare class RequestSnapshot extends Message<RequestSnapshot> {
  /**
   * @generated from field: google.protobuf.Empty _ = 1;
   */
  ?: Empty;

  constructor(data?: PartialMessage<RequestSnapshot>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.RequestSnapshot";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestSnapshot;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestSnapshot;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestSnapshot;

  static equals(a: RequestSnapshot | PlainMessage<RequestSnapshot> | undefined, b: RequestSnapshot | PlainMessage<RequestSnapshot> | undefined): boolean;
}

/**
 * ControlResponse is returned by agent to ACK or NACK commands.
 *
 * @generated from message agentpb.ControlResponse
 */
export declare class ControlResponse extends Message<ControlResponse> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok: boolean;

  /**
   * non‑empty when ok==false
   *
   * @generated from field: string error_msg = 2;
   */
  errorMsg: string;

  constructor(data?: PartialMessage<ControlResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.ControlResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlResponse;

  static equals(a: ControlResponse | PlainMessage<ControlResponse> | undefined, b: ControlResponse | PlainMessage<ControlResponse> | undefined): boolean;
}

/**
 * AgentEnvelope wraps the possible upstream messages so the method can stay a
 * single stream.
 *
 * @generated from message agentpb.AgentEnvelope
 */
export declare class AgentEnvelope extends Message<AgentEnvelope> {
  /**
   * @generated from oneof agentpb.AgentEnvelope.msg
   */
  msg: {
    /**
     * @generated from field: agentpb.AgentInfo info = 1;
     */
    value: AgentInfo;
    case: "info";
  } | {
    /**
     * @generated from field: agentpb.Heartbeat heartbeat = 2;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: agentpb.ControlResponse ack = 3;
     */
    value: ControlResponse;
    case: "ack";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AgentEnvelope>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.AgentEnvelope";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentEnvelope;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentEnvelope;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentEnvelope;

  static equals(a: AgentEnvelope | PlainMessage<AgentEnvelope> | undefined, b: AgentEnvelope | PlainMessage<AgentEnvelope> | undefined): boolean;
}

