// internal/proto/agent.proto
// RPC contract for control‐plane communication *from* the gateway *to* agents.
// In FlareGo v0.1 agents are largely autonomous (they push flamegraphs and do
// not await commands), but exposing this service early allows future features
// such as remote sampler tuning, version upgrade orchestration and health
// checks without breaking backward compatibility.
//
// Design principles:
//   • Keep messages minimal – only what is required for handshake and basic
//     ping/pong.  Fine‑grained control commands can be added with new RPCs or
//     oneof fields in ControlRequest.
//   • Streaming is unidirectional gateway→agent so that the gateway can push
//     config changes instantly while the agent needs only to ACK.
//   • Field numbers are frozen once released.  Reserve ranges for internal
//     use (100‑199) and experimental (200‑299).

// @generated by protoc-gen-es v1.10.1 with parameter "import_extension=ts"
// @generated from file agent.proto (package agentpb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, proto3 } from "@bufbuild/protobuf";

/**
 * AgentInfo is sent by the agent once on connection so the gateway can label
 * metrics and UI panels.
 *
 * @generated from message agentpb.AgentInfo
 */
export const AgentInfo = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.AgentInfo",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pid", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Heartbeat keeps connection alive; payload is optional runtime stats to help
 * ops dashboards without scraping Prom.
 *
 * @generated from message agentpb.Heartbeat
 */
export const Heartbeat = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.Heartbeat",
  () => [
    { no: 1, name: "ts_unix_ms", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "goroutines", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "heap_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * ControlRequest allows the gateway to instruct agent to change behaviour.
 *
 * @generated from message agentpb.ControlRequest
 */
export const ControlRequest = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.ControlRequest",
  () => [
    { no: 1, name: "adjust_sampling", kind: "message", T: AdjustSamplingRate, oneof: "cmd" },
    { no: 2, name: "request_snapshot", kind: "message", T: RequestSnapshot, oneof: "cmd" },
  ],
);

/**
 * @generated from message agentpb.AdjustSamplingRate
 */
export const AdjustSamplingRate = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.AdjustSamplingRate",
  () => [
    { no: 1, name: "hz", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * RequestSnapshot asks the agent to immediately send a flamegraph chunk (e.g.,
 * for UI “Refresh now” button).
 *
 * @generated from message agentpb.RequestSnapshot
 */
export const RequestSnapshot = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.RequestSnapshot",
  () => [
    { no: 1, name: "_", kind: "message", T: Empty },
  ],
);

/**
 * ControlResponse is returned by agent to ACK or NACK commands.
 *
 * @generated from message agentpb.ControlResponse
 */
export const ControlResponse = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.ControlResponse",
  () => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error_msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * AgentEnvelope wraps the possible upstream messages so the method can stay a
 * single stream.
 *
 * @generated from message agentpb.AgentEnvelope
 */
export const AgentEnvelope = /*@__PURE__*/ proto3.makeMessageType(
  "agentpb.AgentEnvelope",
  () => [
    { no: 1, name: "info", kind: "message", T: AgentInfo, oneof: "msg" },
    { no: 2, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "msg" },
    { no: 3, name: "ack", kind: "message", T: ControlResponse, oneof: "msg" },
  ],
);

