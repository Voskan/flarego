// internal/proto/gateway.proto
// This schema defines the gRPC contract between the in‑process FlareGo agent
// and the central gateway.  The protocol is intentionally minimal in v0.1:
// agents stream raw flame‑graph JSON frames; the gateway may respond with an
// optional acknowledgement or future control messages.  Keeping the payload as
// opaque bytes avoids frequent schema churn on the hot path.

// @generated by protoc-gen-es v1.10.1 with parameter "import_extension=ts"
// @generated from file gateway.proto (package agentpb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * FlamegraphChunk carries one compressed or plain JSON blob produced by the
 * agent's flamegraph.Builder.  Compression (gzip, zstd) is negotiated via the
 * gRPC 'content‑encoding' header – transparent to this schema.
 *
 * @generated from message agentpb.FlamegraphChunk
 */
export declare class FlamegraphChunk extends Message<FlamegraphChunk> {
  /**
   * @generated from field: bytes payload = 1;
   */
  payload: Uint8Array;

  constructor(data?: PartialMessage<FlamegraphChunk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "agentpb.FlamegraphChunk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlamegraphChunk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlamegraphChunk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlamegraphChunk;

  static equals(a: FlamegraphChunk | PlainMessage<FlamegraphChunk> | undefined, b: FlamegraphChunk | PlainMessage<FlamegraphChunk> | undefined): boolean;
}

